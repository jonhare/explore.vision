{"name":"default","code":"var kernel = [[-1, 0 , 1]];\n\nfunction process(input, output) {\n\tconvolve(input, output, kernel);\n\tnormalise(output);\n}\n\nfunction convolve(input, output, kernel) {\n\tvar x, y, i, j, kv, yy, xx;\n\n\tvar kh = kernel.length;\n\tvar kw = kernel[0].length;\n\tvar hh = (kh / 2) << 0;\n\tvar hw = (kw / 2) << 0;\n\n\tfor (y=hh; y<output.height-hh-1; y++) {\n\t\tfor (x=hw; x<output.width-hw-1; x++) {\n\t\t\tfor (j=-hh; j<=hh; j++) {\n\t\t\t\tfor (i=-hw; i<=hw; i++) {\n\t\t\t\t\tkv = kernel[j+hh][i+hw];\n\t\t\t\t\tyy = y - j;\n\t\t\t\t\txx = x - i;\n\n\t\t\t\t\toutput[y][x].r += input[yy][xx].r * kv;\n\t\t\t\t\toutput[y][x].g += input[yy][xx].g * kv;\n\t\t\t\t\toutput[y][x].b += input[yy][xx].b * kv;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction normalise(output) {\n\tvar minr = 1e9, ming = 1e9, minb = 1e9, maxr = -1e9, maxg = -1e9, maxb = -1e9;\n\n\tfor (y=0; y<output.height; y++) {\n\t\tfor (x=0; x<output.width; x++) {\n\t\t\tif (output[y][x].r < minr) minr = output[y][x].r;\n\t\t\tif (output[y][x].g < ming) ming = output[y][x].g;\n\t\t\tif (output[y][x].b < minb) minb = output[y][x].b;\n\t\t\tif (output[y][x].r > maxr) maxr = output[y][x].r;\n\t\t\tif (output[y][x].g > maxg) maxg = output[y][x].g;\n\t\t\tif (output[y][x].b > maxb) maxb = output[y][x].b;\n\t\t}\n\t}\n\n\tfor (y=0; y<output.height; y++) {\n\t\tfor (x=0; x<output.width; x++) {\n\t\t\toutput[y][x].r = (output[y][x].r - minr) / (maxr - minr);\n\t\t\toutput[y][x].g = (output[y][x].g - ming) / (maxg - ming);\n\t\t\toutput[y][x].b = (output[y][x].b - minb) / (maxb - minb);\n\t\t}\n\t}\n}\n"}
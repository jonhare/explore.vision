{"name":"default","code":"var smoothingKernel = gaussianKernel(1.0);\n\nfunction process(input, output) {\n\tconvolve(input, output, smoothingKernel);\n}\n\nfunction convolve(input, output, kernel) {\n\tvar x, y, i, j, kv, yy, xx;\n\n\tvar kh = kernel.length;\n\tvar kw = kernel[0].length;\n\tvar hh = (kh / 2) << 0;\n\tvar hw = (kw / 2) << 0;\n\n\tfor (y=hh; y<output.height-hh-1; y++) {\n\t\tfor (x=hw; x<output.width-hw-1; x++) {\n\t\t\tfor (j=-hh; j<=hh; j++) {\n\t\t\t\tfor (i=-hw; i<=hw; i++) {\n\t\t\t\t\tkv = kernel[j+hh][i+hw];\n\t\t\t\t\tyy = y - j;\n\t\t\t\t\txx = x - i;\n\n\t\t\t\t\toutput[y][x].r += input[yy][xx].r * kv;\n\t\t\t\t\toutput[y][x].g += input[yy][xx].g * kv;\n\t\t\t\t\toutput[y][x].b += input[yy][xx].b * kv;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\nfunction gaussianKernel(sigma) {\n\tvar size = Math.round(1 + sigma * 6);\n\tif (size % 2 === 0) size++;\n\n\tvar kernel = newImage(size, size);\n\tvar hw = ((size - 1) / 2) << 0;\n\tvar hh = ((size - 1) / 2) << 0;\n\tvar sigmasq = 2 * sigma * sigma;\n\n\tvar i, j, x, y, sum = 0;\n\tfor (y = -hh, j = 0; y <= hh; y++, j++) {\n\t\tfor (x = -hw, i = 0; x <= hw; x++, i++) {\n\t\t\tvar radsqrd = x * x + y * y;\n\t\t\tkernel[j][i] = Math.exp(-radsqrd / sigmasq);\n\t\t\tsum += kernel[j][i];\n\t\t}\n\t}\n\tfor (j = 0; j<size ; j++) {\n\t\tfor (i = 0; i<size; i++) {\n\t\t\tkernel[j][i] /= sum;\n\t\t}\n\t}\n\treturn kernel;\n}"}